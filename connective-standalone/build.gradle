plugins {
    id 'java'
}

apply plugin: 'eclipse'

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

repositories {
    mavenCentral()
    flatDir {
       dirs 'fluid'
   	}
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
	implementation name: 'Fluid', version: '1.0.0.A33'
	
	implementation 'org.ow2.asm:asm:9.1'
	implementation 'org.ow2.asm:asm-tree:9.1'
	implementation 'org.ow2.asm:asm-commons:9.1'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
	implementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.12'
	
	implementation rootProject
	implementation project(":connective-basicfile")
}

tasks.named('test') {
    useJUnitPlatform()
}

task javaDocs(type: Javadoc) {
	classpath = sourceSets.main.runtimeClasspath
	source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: 'javaDocs') {
	from javadoc
	classifier = 'javadoc'
	exclude "**/extra/**"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude "**/extra/**"
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

project.configurations.implementation.canBeResolved = true

task installation () {
	doLast {
		copy {
			from "connective"
			from "connective.bat"
			into "build/installations"
		}
		for (ResolvedArtifact arti : project.configurations.implementation.resolvedConfiguration.getResolvedArtifacts()) {
			if (arti.getClassifier() != null)
				continue;
			copy {
				from arti.file
				rename arti.file.getName(), arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension()
				into "build/installations/libs"
			}
		}
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;

				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "build/installations"
				}
			}
		}
	}
}

installation.dependsOn project.tasks.build
build.finalizedBy installation
